{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAkBA,MAAM,gBAAgB,GAAG;IACvB,mBAAmB;IACnB;;OAEG;IACH,KAAK,EAAE,OAAO;IAEd,KAAK,EAAE,OAAO;IAEd;;OAEG;IACH,iBAAiB,EAAE,mBAAmB;IAEtC,KAAK,EAAE,OAAO;IAEd,MAAM,EAAE,QAAQ;IAChB,iBAAiB;IAEjB,sBAAsB;IACtB,OAAO,EAAE,SAAS;IAElB;;OAEG;IACH,cAAc,EAAE,gBAAgB;IAEhC,OAAO,EAAE,SAAS;IAElB,QAAQ,EAAE,UAAU;IAEpB;;OAEG;IACH,OAAO,EAAE,SAAS;IAElB,GAAG,EAAE,KAAK;IAEV;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB,oBAAoB;IAEpB,WAAW;IACX,KAAK,EAAE,OAAO;IAEd,WAAW,EAAE,aAAa;IAE1B;;OAEG;IACH,QAAQ,EAAE,UAAU;IAEpB,OAAO,EAAE,SAAS;IAElB,OAAO,EAAE,SAAS;IAElB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAEhB;;OAEG;IACH,YAAY,EAAE,cAAc;IAC5B,SAAS;CACD,CAAC;AAEX,MAAM,CAAC,MAAM,eAAe,GAAG,gBAE9B,CAAC;AAGF,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;CACJ,CAAC","sourcesContent":["export type CallbackID = string;\r\nexport interface BarcodeScannerPlugin {\r\n  prepare(options?: ScanOptions): Promise<void>;\r\n  hideBackground(): Promise<void>;\r\n  showBackground(): Promise<void>;\r\n  startScan(options?: ScanOptions): Promise<ScanResult>;\r\n  startScanning(options?: ScanOptions, callback?: (result: ScanResult, err?: any) => void): Promise<CallbackID>;\r\n  pauseScanning(): Promise<void>;\r\n  resumeScanning(): Promise<void>;\r\n  stopScan(options?: StopScanOptions): Promise<void>;\r\n  checkPermission(options?: CheckPermissionOptions): Promise<CheckPermissionResult>;\r\n  openAppSettings(): Promise<void>;\r\n  enableTorch(): Promise<void>;\r\n  disableTorch(): Promise<void>;\r\n  toggleTorch(): Promise<void>;\r\n  getTorchState(): Promise<TorchStateResult>;\r\n}\r\n\r\nconst _SupportedFormat = {\r\n  // BEGIN 1D Product\r\n  /**\r\n   * Android only, UPC_A is part of EAN_13 according to Apple docs\r\n   */\r\n  UPC_A: 'UPC_A',\r\n\r\n  UPC_E: 'UPC_E',\r\n\r\n  /**\r\n   * Android only\r\n   */\r\n  UPC_EAN_EXTENSION: 'UPC_EAN_EXTENSION',\r\n\r\n  EAN_8: 'EAN_8',\r\n\r\n  EAN_13: 'EAN_13',\r\n  // END 1D Product\r\n\r\n  // BEGIN 1D Industrial\r\n  CODE_39: 'CODE_39',\r\n\r\n  /**\r\n   * iOS only\r\n   */\r\n  CODE_39_MOD_43: 'CODE_39_MOD_43',\r\n\r\n  CODE_93: 'CODE_93',\r\n\r\n  CODE_128: 'CODE_128',\r\n\r\n  /**\r\n   * Android only\r\n   */\r\n  CODABAR: 'CODABAR',\r\n\r\n  ITF: 'ITF',\r\n\r\n  /**\r\n   * iOS only\r\n   */\r\n  ITF_14: 'ITF_14',\r\n  // END 1D Industrial\r\n\r\n  // BEGIN 2D\r\n  AZTEC: 'AZTEC',\r\n\r\n  DATA_MATRIX: 'DATA_MATRIX',\r\n\r\n  /**\r\n   * Android only\r\n   */\r\n  MAXICODE: 'MAXICODE',\r\n\r\n  PDF_417: 'PDF_417',\r\n\r\n  QR_CODE: 'QR_CODE',\r\n\r\n  /**\r\n   * Android only\r\n   */\r\n  RSS_14: 'RSS_14',\r\n\r\n  /**\r\n   * Android only\r\n   */\r\n  RSS_EXPANDED: 'RSS_EXPANDED',\r\n  // END 2D\r\n} as const;\r\n\r\nexport const SupportedFormat = _SupportedFormat satisfies {\r\n  [k in SupportedFormat]: k;\r\n};\r\nexport type SupportedFormat = typeof _SupportedFormat[keyof typeof _SupportedFormat];\r\n\r\nexport const CameraDirection = {\r\n  FRONT: 'front',\r\n  BACK: 'back',\r\n} as const;\r\n\r\nexport type CameraDirection = typeof CameraDirection[keyof typeof CameraDirection];\r\n\r\nexport interface ScanOptions {\r\n  /**\r\n   * This parameter can be used to make the scanner only recognize specific types of barcodes.\r\n   *  If `targetedFormats` is _not specified_ or _left empty_, _all types_ of barcodes will be targeted.\r\n   *\r\n   * @since 1.2.0\r\n   */\r\n  targetedFormats?: SupportedFormat[];\r\n  /**\r\n   * This parameter can be used to set the camera direction.\r\n   *\r\n   * @since 2.1.0\r\n   */\r\n  cameraDirection?: CameraDirection;\r\n}\r\n\r\nexport interface StopScanOptions {\r\n  /**\r\n   * If this is set to `true`, the `startScan` method will resolve.\r\n   * Additionally `hasContent` will be `false`.\r\n   * For more information see: https://github.com/capacitor-community/barcode-scanner/issues/17\r\n   *\r\n   * @default true\r\n   * @since 2.1.0\r\n   */\r\n  resolveScan?: boolean;\r\n}\r\n\r\nexport type ScanResult = IScanResultWithContent | IScanResultWithoutContent;\r\n\r\nexport interface IScanResultWithContent {\r\n  /**\r\n   * This indicates whether or not the scan resulted in readable content.\r\n   * When stopping the scan with `resolveScan` set to `true`, for example,\r\n   * this parameter is set to `false`, because no actual content was scanned.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  hasContent: true;\r\n\r\n  /**\r\n   * This holds the content of the barcode if available.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * This returns format of scan result.\r\n   *\r\n   * @since 2.1.0\r\n   */\r\n  format: string;\r\n}\r\n\r\nexport interface IScanResultWithoutContent {\r\n  /**\r\n   * This indicates whether or not the scan resulted in readable content.\r\n   * When stopping the scan with `resolveScan` set to `true`, for example,\r\n   * this parameter is set to `false`, because no actual content was scanned.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  hasContent: false;\r\n\r\n  /**\r\n   * This holds the content of the barcode if available.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  content: undefined;\r\n\r\n  /**\r\n   * This returns format of scan result.\r\n   *\r\n   * @since 2.1.0\r\n   */\r\n  format: undefined;\r\n}\r\n\r\nexport interface CheckPermissionOptions {\r\n  /**\r\n   * If this is set to `true`, the user will be prompted for the permission.\r\n   * The prompt will only show if the permission was not yet granted and also not denied completely yet.\r\n   * For more information see: https://github.com/capacitor-community/barcode-scanner#permissions\r\n   *\r\n   * @default false\r\n   * @since 1.0.0\r\n   */\r\n  force?: boolean;\r\n}\r\n\r\nexport interface CheckPermissionResult {\r\n  /**\r\n   * When set to `true`, the ermission is granted.\r\n   */\r\n  granted?: boolean;\r\n\r\n  /**\r\n   * When set to `true`, the permission is denied and cannot be prompted for.\r\n   * The `openAppSettings` method should be used to let the user grant the permission.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  denied?: boolean;\r\n\r\n  /**\r\n   * When this is set to `true`, the user was just prompted the permission.\r\n   * Ergo: a dialog, asking the user to grant the permission, was shown.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  asked?: boolean;\r\n\r\n  /**\r\n   * When this is set to `true`, the user has never been prompted the permission.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  neverAsked?: boolean;\r\n\r\n  /**\r\n   * iOS only\r\n   * When this is set to `true`, the permission cannot be requested for some reason.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  restricted?: boolean;\r\n\r\n  /**\r\n   * iOS only\r\n   * When this is set to `true`, the permission status cannot be retrieved.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  unknown?: boolean;\r\n}\r\n\r\nexport interface TorchStateResult {\r\n  /**\r\n   * Whether or not the torch is currently enabled.\r\n   */\r\n  isEnabled: boolean;\r\n}\r\n"]}